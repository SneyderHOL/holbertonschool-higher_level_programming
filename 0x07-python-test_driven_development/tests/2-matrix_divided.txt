The ``2-matrix_divided`` module
============================

Using ``matrix_divided``
-----------------------------

Import matrix_divided from 2-matrix_divided:
     >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

-----------------------------
    Base test

    >>> mtx = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(mtx, 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
    >>> matrix_divided([[1,2]], 2)
    [[0.5, 1.0]]
    >>> matrix_divided([[2, 3], [1]], 2)
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size
     
-----------------------------
    None arguments

    >>> matrix_divided(None, None)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([[None, 1.1], [2, 3]], 0.0)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([[1, 1.1], [2, 3]], None)
    Traceback (most recent call last):
    TypeError: div must be a number

    >>> matrix_divided([[1, 1.1], None], 0.0)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

-----------------------------
    Only one argument

    >>> matrix_divided(2)
    Traceback (most recent call last):
    TypeError: matrix_divided() missing 1 required positional argument: 'div'

    >>> matrix_divided([1,2])
    Traceback (most recent call last):
    TypeError: matrix_divided() missing 1 required positional argument: 'div'

    >>> matrix_divided('str')
    Traceback (most recent call last):
    TypeError: matrix_divided() missing 1 required positional argument: 'div'

-----------------------------
    No list

    >>> matrix_divided(1, 5)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided('str', 5)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided((10, 20), 5)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided({10, 20}, 5)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided({'a': 10, 'b': 20}, 5)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

-----------------------------
    No list of lists

    >>> matrix_divided([1], 5)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats
    
    >>> matrix_divided([10, 20], 5)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided(['str', 1, 2], 5)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([(1, 2), (3, 4)], 5)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([[10, 20], 30, 40], 5)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

-----------------------------
    No int or float elements

    >>> matrix_divided([['str1', 2], [3, 4]], 2)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([[1, 2], [(5,6), (7,8)]], 5)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([[{'key': 1, 'key_2': 2}], [{'key_3': 3, 'key_4': 4}]], 5)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([[{1, 2}], [{3, 4}]], 5)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

-----------------------------
    No same size

    >>> matrix_divided([[1], [2, 3]], 5)
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

    >>> matrix_divided([[1.0, 1.1, 1.2], [2, 3]], 5)
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

-----------------------------
    Div not a number

    >>> matrix_divided([[1, 1.1], [2, 3]], 'str')
    Traceback (most recent call last):
    TypeError: div must be a number

    >>> matrix_divided([[1, 1.1], [2, 3]], 'c')
    Traceback (most recent call last):
    TypeError: div must be a number

    >>> matrix_divided([[1, 1.1], [2, 3]], (1, 2))
    Traceback (most recent call last):
    TypeError: div must be a number

    >>> matrix_divided([[1, 1.1], [2, 3]], [1, 2])
    Traceback (most recent call last):
    TypeError: div must be a number

    >>> matrix_divided([[1, 1.1], [2, 3]], {1, 2})
    Traceback (most recent call last):
    TypeError: div must be a number

    >>> matrix_divided([[1, 1.1], [2, 3]], {'a': 1, 'b': 2})
    Traceback (most recent call last):
    TypeError: div must be a number

-----------------------------
    Div equal to zero

    >>> matrix_divided([[1, 1.1], [2, 3]], 0)
    Traceback (most recent call last):
    ZeroDivisionError: division by zero

    >>> matrix_divided([[1, 1.1], [2, 3]], 0.0)
    Traceback (most recent call last):
    ZeroDivisionError: division by zero

-----------------------------
    Long float numbers

    >>> matrix_divided([[10.666666666, 5.00], [2, 8.444]], 2.0)
    [[5.33, 2.5], [1.0, 4.22]]

-----------------------------
    Divide by infinite num

    >>> matrix_divided([[1, 1.1], [2, 3]], float('inf'))
    [[0.0, 0.0], [0.0, 0.0]]

